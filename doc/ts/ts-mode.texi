\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename ts-mode.info
@settitle Emacs TypoScript Mode Manual
@setchapternewpage off
@afourpaper
@macro typothree {}
TYPO3
@end macro
@macro ts {}
TypoScript
@end macro
@macro ext {extkey}
@emph{\extkey\}
@end macro
@c %**end of header

@copying
This manual introduces @ts{} Mode, a major mode for editing @ts{} files
with Emacs.

Copyright @copyright{} 2009 Joachim Mathes.

@quotation
This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your
option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
@end quotation
@end copying

@titlepage
@title TS Mode
@subtitle An Emacs major mode for @ts{} files
@author Joachim Mathes (@email{joachim_mathes@@web.de})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents
@c @ifnotinfo
@c @unnumbered List of figures
@c @listoffloats Figure
@c @page
@c @end ifnotinfo

@ifnottex
@node Top
@top TypoScript Mode

@insertcopying
@end ifnottex

@menu
* Introduction:: @ts{} and Emacs
* Installation:: Prepare Emacs
* Using TS mode:: Features, commands and key bindings
* Key Index::
* Variable Index::
* Function Index::
@end menu

@c =====================================================================
@node Introduction, Installation, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction

This manual describes TS mode, which extends Emacs with functionality
for editing @ts{} files. @ts{} is an intrinsic part of
@typothree{}. Generally speaking it is a syntax for defining information
in a hierarchical structure using simple ASCII text content.

GNU Emacs is an extensible, customizable text editor and can be obtained
for free from @uref{http://ftp.gnu.org/pub/gnu/emacs/}. @xref{Top,
,Preface, emacs, GNU Emacs manual}. The code is written and tested
on GNU Emacs version 23.1.1.

@c =====================================================================
@node Installation, Using TS mode, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter Installation

To install @ts{} Mode just drop file @file{ts-mode.el} into
a directory on your load-path. If you are the administrator of the
system you are working on, a possible directory could be
@file{/usr/share/emacs/site-lisp/ts-mode}, for example. You might
byte-compile it for better performance. @xref{Byte Compilation, , Byte
Compilation, elisp, Emacs Lisp}.

To set up Emacs to automatically edit files ending in @file{.ts} using
@ts{} Mode, add the following lines to your @file{~/.emacs}
file (GNU Emacs) or @file{~/.xemacs/init.el} file (XEmacs):
@lisp
(setq auto-mode-alist (cons '("\\.ts$" . ts-mode) auto-mode-alist))
(autoload 'ts-mode "ts-mode" "@ts{} input file editing mode." t)
@end lisp
If you just want to test @ts{} Mode or are not eager to modify
your @file{~/.emacs} file, type @kbd{M-x load-file}, load the
@file{ts-mode.el} file and finally apply the mode to the current
buffer by typing @kbd{M-x ts-mode}.

@c =====================================================================
@node Using TS mode, Key Index, Installation, Top
@comment  node-name,  next,  previous,  up
@chapter Using TS Mode

@ts{} Mode supports different display and editing features, which
will be described in the following sections.

@menu
* Customization::
* Syntax highlighting::
* Line indentation::
* Folding::
@end menu

@c ---------------------------------------------------------------------
@node Customization, Syntax highlighting, , Using TS mode
@comment  node-name,  next,  previous,  up
@section Customization

@ts{} Mode defines a customization group in Emacs, which is a
member of the Emacs standard customization group @code{Languages}, whose
parent Emacs group is @code{Programming}. Use @kbd{M-x customize} to
browse through the full list of customization groups or @kbd{M-x
customize-group} with parameter @samp{typoscript} to enter the
@ts{} Mode customization group directly

@noindent
The following user-customizable variables are provided.

@deftypevar integer ts-block-indentation
The indentation relative to a predecessing line which begins a new
code block.

Default: @samp{4}
@end deftypevar

@deftypevar choice ts-newline-function
This variable decides which function to call upon pressing
@kbd{@key{RET}}. Depending on the chosen option, line indentation will
be processed automatically. The following options are available for
@var{choice}:
@table @code
@item newline
This command just inserts newlines into the current buffer before point.
@item newline-and-indent
This function inserts a newline@footnote{Note the different meanings of
@emph{newline} and @emph{new line}, that goes with their different
spellings. @emph{newline} refers to the code representation of a new
line, while @emph{new line} means its interpretation as a visible new
line in the editor after pressing @kbd{@key{RET}}.}, then indents the
new line (the one following the newline just inserted) according to
@ts{} Mode's internal indentation strategies.
@item reindent-then-newline-and-indent
This command reindents the current line, inserts a newline at point, and
then indents the new line (the one following the newline just inserted).
@end table

Default: @samp{newline}.
@end deftypevar

@deftypevar color ts-fold-foreground-color
The foreground color used to highlight a folded block.

Default: @samp{white}.
@end deftypevar

@deftypevar color ts-fold-background-color
The background color used to highlight a folded block.

Default: @samp{DodgerBlue1}.
@end deftypevar

@c ---------------------------------------------------------------------
@node Syntax highlighting, Line indentation, Customization, Using TS mode
@comment  node-name,  next,  previous,  up
@section Syntax highlighting

Syntax highlighting is a convenient feature of an editor to improve the
appearance hence the readability of code. @ts{} Mode supports the
highlighting of single line and multiline comments, keywords and several
syntactic structures.

In XEmacs syntax highlighting should be enabled automatically. In GNU
Emacs you may have to add these lines to your @file{~/.emacs} file:
@lisp
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
@end lisp

@c ---------------------------------------------------------------------
@node Line indentation, Folding, Syntax highlighting, Using TS mode
@comment  node-name,  next,  previous,  up
@section Line indentation

A @ts{} code line is indented automatically when the @key{TAB} key is
pressed while point is on the according line. The indentation takes
place with respect to the indentation of previous
lines. @xref{Customization}, for details. The default width is @code{4}.

Depending on the current value of the customizable variable
@var{ts-newline-function}, line indentation might be executed
automatically after pressing @kbd{@key{RET}}. @xref{Customization}, for
details.

Furthermore the characters @samp{@}} (closing parenthesis) and @samp{)}
(closing brace) are @emph{electric}, i.e. they are indented
automatically after insertion.

@c =====================================================================
@node Folding, , Line indentation, Using TS mode
@comment  node-name,  next,  previous,  up
@section Folding

@kindex @kbd{C-c C-e}
@kindex @kbd{C-c C-a}
@kindex @kbd{C-c C-u C-r}
@kindex @kbd{C-c C-u C-b}

Emacs is able to alter the appearance of a buffer's text on the screen,
for the sake of presentation features, with so called
@dfn{overlays}. In @ts{} Mode this mechanism is used to ``fold'' @ts{}
blocks like
@smallformat
@verbatim
1 page.10 {
2     table = tt_content
3     select {
4         pidInList = this
5         orderBy = sorting
6     }
7 }
@end verbatim
@end smallformat
to a single non editable line containing only the name of the
@ts{} block, if point is on the @samp{select} line.
@smallformat
@verbatim
1 page.10 {
2     table = tt_content
3     [select]
4     }
5 }
@end verbatim
@end smallformat
These string replacements are highlighted with dedicated foreground and
background colors, which can of course be
customized. @xref{Customization}, for details. The default color
combination is @code{white} text on an @code{DodgerBlue1} background.

@noindent
The following commands are implemented to ``fold'' and ``unfold''
measurement blocks.

@deffn {Interactive Command} ts-fold-block
Fold the innermost block with respect to point position.

Key binding: @kbd{C-c C-e}
@end deffn

@deffn {Interactive Command} ts-unfold-block
Unfold the folded block at point.

Key binding: @kbd{C-c C-a}
@end deffn

@deffn {Interactive Command} ts-unfold-region start end
Unfold every folded measurement block, which is placed within a region
limited by mark and point.

Key binding: @kbd{C-c C-u C-r}
@end deffn

@deffn {Interactive Command} ts-unfold-buffer
Unfold every folded block in the current buffer.

Key binding: @kbd{C-c C-u C-b}
@end deffn

@page

@c =====================================================================
@node Key Index, Variable Index, Using TS mode, Top
@comment  node-name,  next,  previous,  up
@unnumbered Key Index

@printindex ky

@c =====================================================================
@node Variable Index, Function Index, Key Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Variable Index

@printindex vr

@c =====================================================================
@node Function Index,  , Variable Index, Top
@comment  node-name,  next,  previous,  up
@unnumbered Function Index

@printindex fn

@bye
